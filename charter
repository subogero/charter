#!/usr/bin/perl
use strict;
use warnings;
use Mojolicious::Lite;
use YAML::XS;
use FindBin;
use lib "$FindBin::Bin/lib";
use DBconnect;
use List::Util qw(min reduce);
use Sys::Hostname;

sub common_lead {
    my $path = reduce {
        my $min = min length($a), length($b);
        my $ret = substr($a, 0, $min);
        my $new = substr($b, 0, $min);
        while ($ret ne $new) {
            $ret =~ s/.$//;
            $new =~ s/.$//;
        }
        $ret
    } @_;
    $path =~ s|^/home/||;
    return $path;
}

sub color {
    our @colors = qw{
        rgb(255,0,0)
        rgb(255,128,0)
        rgb(255,200,0)
        rgb(128,200,0)
        rgb(0,255,0)
        rgb(0,200,128)
        rgb(0,200,200)
        rgb(0,128,255)
        rgb(0,0,255)
        rgb(128,0,255)
        rgb(255,0,255)
        rgb(255,128,128)
    };
    return borderColor => $colors[$_[0]++ % scalar @colors];
}

sub read_csv {
    my $file = shift;
    open my $fh, '<', $file or die $!;
    my %res;
    while (readline $fh) {
        s/\r|\n//g; # chomp any linefeed format
        s/[,;]$//; # chop trailing CSV separators
        my @comma = split /,/;
        my @semi = split /;/;
        if (@comma > @semi) {
            my $key = 'c' . scalar @comma;
            push @{$res{$key}}, \@comma;
        } elsif (@semi) {
            my $key = 's' . scalar @semi;
            push @{$res{$key}}, \@semi;
        }
    }
    reduce { @$b > @$a ? $b : $a } values %res;
}

sub process_csv {
    my $table = shift; # arrayref of arrayrefs, 1st line keys
    my $data = {
        labels => [],
        datasets => [],
    };
    my $i_color = 0;
    while (@{$table->[0]}) {
        push
            @{$data->{datasets}},
            { color($i_color), data => [ map { shift @$_ } @$table ]};
    }
    $_->{label} = shift @{$_->{data}} for @{$data->{datasets}};
    my $x_axis = shift @{$data->{datasets}};
    $data->{labels} = $x_axis->{data};
    $data->{x_label} = $x_axis->{label};
    @{$data->{labels}} or die "No CSV formatted data found in file";
    return $data;
}

# Centralized JSON based exception handling
hook before_render => sub {
    my ($c, $args) = @_;

    return unless my $template = $args->{template};
    return unless $template =~ /^exception/;

    %$args = (
        status => 500,
        json => { error => $args->{exception}{message} },
    );
};

get '/' => sub {
    open my $fh, '<', 'public/index.html' or die $!;
    my $index = join '', readline $fh;
    shift()->render(text => $index);
};

get "/home/*path" => { path => '' } => sub {
    my $c = shift;
    my $path = $c->stash('path');
    my @hits = map { $_ .= '/' if -d $_; $_ } glob "/home/$path*";
    my $hit = common_lead @hits;
    $c->render(json => {
        path => $hit || $path,
        hits => [ map { s|^/home/||; $_ } @hits ],
    });
};

post "/home/*path" => { path => '' } => sub {
    my $c = shift;
    my $path = "/home/" . $c->stash('path');
    my $data = process_csv read_csv $path;
    $c->render(json => { data => $data });
};

get "/db/*schema" => { schema => '' } => sub {
    my $c = shift;
    my $path = $c->stash('schema');
    my ($env, $schema) = split /\//, $path, 2;
    my $conn = dbConnectInfo;
    my (@hits, $hit);
    unless (defined $schema) { # Expand env
        @hits = map {"$_/" } grep { /^$env/ } keys %$conn;
        $hit = common_lead @hits;
    } else { # Expand schema name
        my %schemas = %{$conn->{$env}};
        my %shits =
            map { $env.'/'.$_ => "$schemas{$_}->{username}\@$schemas{$_}->{sid}" }
            grep { m/^$schema/ }
            keys %schemas;
        @hits = map { "$_ $shits{$_}" } sort keys %shits;
        $hit = common_lead keys %shits;
    }
    $c->render(json => {
        path => $hit || $path,
        hits => \@hits,
    });
};

post "/db/*schema" => { schema => '' } => sub {
    my $c = shift;
    my $path = $c->stash('schema');
    my ($env, $schema) = split /\//, $path, 2;
    $env or die 'No DB env';
    $schema or die 'No DB schema';
    local $ENV{MDS_MODE} = $env;
    db_connect($schema);
    print STDERR Dump { dbhs => [ keys %$dbhs ] };
    $c->render(json => { dbh => $schema });
};

post "/select" => sub {
    my $c = shift;
    my $input = $c->req->json;
    my $schema = $input->{schema} or die 'No schema';
    my $dbh = $dbhs->{$schema} or die "Schema '$schema' disconnected";
    my $query = $input->{query} or die 'Empty query';
    $query =~ s/^select //i;
    $query =~ s/;$//;
    $query =~ /;|insert +into|delete +from|droptable/i and die 'Illegal query';

    my ($col1) = $query =~ /^([\w.]+)[\s,].*/;
    my $sql = "select $query order by $col1";
    print STDERR "$sql\n";
    my $sth = $dbh->prepare_cached($sql);
    $sth->execute;

    my @label = @{$sth->{NAME_lc}};
    my $x_label = shift @label;

    my $i_color = 0;
    my @ys = map { { label => $_, color($i_color), data => [] } } @label;

    my @x;
    while (my @row = $sth->fetchrow_array) {
        push @x, shift @row;
        for (1 .. @row) {
            my $i = $_ - 1;
            push @{$ys[$i]->{data}}, $row[$i];
        }
    }
    $sth->finish;

    my $data = {
        x_label => $x_label,
        labels => \@x,
        datasets => \@ys,
    };
    $c->render(json => { data => $data });
};

print STDERR 'http://' . hostname . ":3000/\n";
app->start('daemon');
